//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.3082
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace UAVP.UAVPSet.Resources {
    using System;
    
    
    /// <summary>
    ///   A strongly-typed resource class, for looking up localized strings, etc.
    /// </summary>
    // This class was auto-generated by the StronglyTypedResourceBuilder
    // class via a tool like ResGen or Visual Studio.
    // To add or remove a member, edit your .ResX file then rerun ResGen
    // with the /str option, or rebuild your VS project.
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "2.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    internal class hilfe {
        
        private static global::System.Resources.ResourceManager resourceMan;
        
        private static global::System.Globalization.CultureInfo resourceCulture;
        
        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal hilfe() {
        }
        
        /// <summary>
        ///   Returns the cached ResourceManager instance used by this class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Resources.ResourceManager ResourceManager {
            get {
                if (object.ReferenceEquals(resourceMan, null)) {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("UAVP.UAVPSet.Resources.hilfe", typeof(hilfe).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }
        
        /// <summary>
        ///   Overrides the current thread's CurrentUICulture property for all
        ///   resource lookups using this strongly typed resource class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Globalization.CultureInfo Culture {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Influence of the baro sensor on the throttle (proportional use 0-1) Zero is off..
        /// </summary>
        internal static string baro {
            get {
                return ResourceManager.GetString("baro", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Influence of the baro sensor on the throttle (differential use 1-4).
        /// </summary>
        internal static string baroDif {
            get {
                return ResourceManager.GetString("baroDif", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Temperature compensation for baro sensor (use 0)  It is always best to allow the quad to aclimate to a temperature change for 5-10 minutes before flying..
        /// </summary>
        internal static string baroTemp {
            get {
                return ResourceManager.GetString("baroTemp", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Corrects oscillations.  The differential value is always an opposite  set sign to proportional value.
        ///The value is too high or too low, when the quad bounces or oscillates. Possiible values of -99 to 99. Typical values of -20 to +20, but values of up to -/+70 are effective.
        ///For YAW use 0..
        /// </summary>
        internal static string Differenzial {
            get {
                return ResourceManager.GetString("Differenzial", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Vertical velocity damping correction value.  Minimizes a rapid climb quad response to wind gusts.  Recommended values 0 to -4. .
        /// </summary>
        internal static string EbenenAusgleich {
            get {
                return ResourceManager.GetString("EbenenAusgleich", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Usually positive for Futaba and Hitech and negative for Graupne/Robbe/JR.
        ///Chooses which receiver pulse is being used by your RX/TX (positive or negative)..
        /// </summary>
        internal static string EmpfaengerImpulse {
            get {
                return ResourceManager.GetString("EmpfaengerImpulse", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Graupner/JR modes (K1=Throttle, K2=Roll, K3=Pitch, K4=Yaw)
        ///Futaba/Robbe/Spek modes (K1=Roll, K2=Pitch, K3=Throttle, K4=Yaw)  Setting will follow both parameter sets..
        /// </summary>
        internal static string GasKanal {
            get {
                return ResourceManager.GetString("GasKanal", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to TBD.
        /// </summary>
        internal static string GPSDifferrential {
            get {
                return ResourceManager.GetString("GPSDifferrential", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to TBD.
        /// </summary>
        internal static string GPSProportional {
            get {
                return ResourceManager.GetString("GPSProportional", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to TBD.
        /// </summary>
        internal static string GPSSmoothing {
            get {
                return ResourceManager.GetString("GPSSmoothing", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Roll and pitch stick sensitivity is 50% less if checked.
        ///This is particularly useful for proportional values &gt; 20 and helpful for beginners!  This can be done on a computer type TX if desired instead..
        /// </summary>
        internal static string HalbRollNick {
            get {
                return ResourceManager.GetString("HalbRollNick", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Update rate of controllers
        ///Minimum recommended value is +2.  Normal value is +4 to+6.  Values will vary depending on your model of TX and RX and ESC&apos;s.
        ///Note how motors start and the stick responsiveness and flight performance.  Usually the higher the value, the slower the stick response will feel.  Oacillations might occur with too high or too low a setting.  Adjust if necessary for the best overall performance!.
        /// </summary>
        internal static string Impuls {
            get {
                return ResourceManager.GetString("Impuls", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to  *Always the same sign as proportional!
        ///Affects the total gyro/acc value over time.  Important for the Heading Lock of the yaw channel.  The higher the value, the more accelerometer self-leveling emphasis there will be.  A value too high causes the quad to osciillate, a value that is too small causes a poor return to  level.   Recommended Pitch and roll &quot;I&quot; values of 0 to 15.  For CCW front prop rotation the yaw &quot;I and P&quot; values are negative!  For CW front prop rotation the yaw &quot;I and P&quot; values are  positi [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string Integral {
            get {
                return ResourceManager.GetString("Integral", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Integral Limiter 
        ///Always positive! 
        ///Low value causes slow return to level.  Too high a value can cause flips.  Recommended values for pitch and roll of +4 to +15. Recommended values for yaw of +1 to +2.  Upper value is automatically limitied by the your integral setting..
        /// </summary>
        internal static string IntegralLimiter {
            get {
                return ResourceManager.GetString("IntegralLimiter", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to LEDs showing condition of integral sensors (only indicates the function of the sensors, no influence on the parameters).
        /// </summary>
        internal static string Integrierzustand {
            get {
                return ResourceManager.GetString("Integrierzustand", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Affects how strong the pitch/rolling motions at the camera servos will be. Connect to K5=pitch servo. K6=roll servo. A setting of 0=no gyro control. Start with a setting of 1 and increase if necessary..
        /// </summary>
        internal static string Kameraausgleich {
            get {
                return ResourceManager.GetString("Kameraausgleich", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Affects how strong the deviation from target heading direction corrects back to heading after moving the yaw stick. Values of  -99 to +99.  Normal is 6-8..
        /// </summary>
        internal static string Kompass {
            get {
                return ResourceManager.GetString("Kompass", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Allows motors to have a minimum throttle to prevent them from stopping in the air and also to have them all spinning for initial launch. Values of 10 to 40 recommended.  Too high a value will cause fluttering in a fast descent..
        /// </summary>
        internal static string Leerlaufgas {
            get {
                return ResourceManager.GetString("Leerlaufgas", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Yaw Limiter (always positive!)
        ///Recommended values 25 to 45.  Typically 35..
        /// </summary>
        internal static string Limiter {
            get {
                return ResourceManager.GetString("Limiter", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Neutral values of the accelerometer are captured when the quad is initially powered on.  It is important that the quad is not jiggled if neutral values are taken and input into the data windows.  These values will vary by accelerometer and breakout board installation, but should remain fairly constant over time. They should be re-checked especially after a very &quot;hard landing&quot;, or a board re-mount.  You can also use the &quot;Get values&quot; button to automatically copy the data to the windows.  As a suggestion to ge [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string Neutral {
            get {
                return ResourceManager.GetString("Neutral", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Affects gyro control strength corresponding to stick input.
        ///The value is too low, when the quad reacts poorly or uncontrollably to stick inputs. The value is too high if the quad is oscillating. The value will be positive for the yaw if the props on the front are CW rotatiing.  
        /// Recommended values for pitch and roll 10 to 25.  Recommended values for yaw 15 to 35. For CCW front prop rotation the yaw &quot;I and P&quot; values are negative!  For CW front prop rotation the yaw &quot;I and P&quot; values are  positive!  Be sure [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string Proportional {
            get {
                return ResourceManager.GetString("Proportional", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Alarm setting for the red LED and buzzer if installed for the Lipo voltage.
        ///Recommended values for 3s Lipos from 43 to 48..
        /// </summary>
        internal static string Unterspannung {
            get {
                return ResourceManager.GetString("Unterspannung", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Quad flight orientation.
        ///+ = an arm forward into flight direction
        ///X = 2 arms forward in flight driection (45° staggerd to + modes)
        ///Note: X mode may require changes to Proportional, Integral and Differential parameters..
        /// </summary>
        internal static string XModus {
            get {
                return ResourceManager.GetString("XModus", resourceCulture);
            }
        }
    }
}
