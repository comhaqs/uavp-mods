<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="baro" xml:space="preserve">
    <value>Influence of the baro sensor on the throttle (proportional use 0-1) Zero is off.</value>
  </data>
  <data name="baroDif" xml:space="preserve">
    <value>Influence of the baro sensor on the throttle (differential use 1-4)</value>
  </data>
  <data name="baroTemp" xml:space="preserve">
    <value>Temperature compensation for baro sensor (use 0)  It is always best to allow the quad to aclimate to a temperature change for 5-10 minutes before flying.</value>
  </data>
  <data name="Differenzial" xml:space="preserve">
    <value>Corrects oscillations.  The differential value is always a negative set sign to proportional value.
The value is too high or too low, when the quad bounces or oscillates. Values of -99 to 99 (mostly -20 to +20, but values of up to +/-70 are effective)
For YAW use 0.</value>
    <comment>Direkt aus der Anleitung entnommen (Test)</comment>
  </data>
  <data name="EbenenAusgleich" xml:space="preserve">
    <value>Vertical velocity damping correction value.  Minimizes a rapid climb quad response to wind gusts.  Recommended values 0 to -4. </value>
  </data>
  <data name="EmpfaengerImpulse" xml:space="preserve">
    <value>Usually positive for Futaba and Hitech and negative for Graupne/Robbe/JR.
Chooses which receiver pulse is being used by your RX/TX (positive or negative).</value>
  </data>
  <data name="GasKanal" xml:space="preserve">
    <value>Graupner/JR modes (K1=Throttle, K2=Roll, K3=Pitch, K4=Yaw)
Futaba/Robbe/Spek modes (K1=Roll, K2=Pitch, K3=Throttle, K4=Yaw)  Setting will follow both parameter sets.</value>
  </data>
  <data name="HalbRollNick" xml:space="preserve">
    <value>Roll and Pitch stick sensitivity is 50% less if checked.
This is particularly useful for proportional values &gt; 20 and helpful for beginners!  This can be done on a computer type TX if desired instead.</value>
  </data>
  <data name="Impuls" xml:space="preserve">
    <value>Update rate of controllers
Minimum recommended value is +2.  Normal value is +4 to+6.  Values will vary depending on your model of TX and RX and ESC's.
Note how motors start and the stick responsiveness and flight performance.  Usually the higher the value, the slower the stick response will feel.  Oacillations might occur with too high or too low a setting.  Adjust if necessary for the best overall performance!</value>
  </data>
  <data name="Integral" xml:space="preserve">
    <value> *Always the same sign as proportional!
Effects the total gyro/acc value over time.  Important for the Heading Lock of the yaw channel.  the higher the value, the more accelerometer self-leveling emphasis there will be.  A value too high causes the quad to osciillate, a value that is too small causes a poor return to  level.   Recommended 0 to 15.  For CW front prop rotation the yaw "I" will be positive!</value>
    <comment>Direkt aus der Anleitung entnommen (Test)</comment>
  </data>
  <data name="IntegralLimiter" xml:space="preserve">
    <value>Integral Limiter 
Always positive! 
Low value causes slow return to level.  Too high a value can cause flips.  Recommended values for pitch and roll = +4 to+15. Recommended values for yaw =+1 to +2.  Upper value is automatically limitied by the your Integral setting.</value>
  </data>
  <data name="Integrierzustand" xml:space="preserve">
    <value>LEDs showing condition of integral sensors (only indicates the function of the sensors, no influence on the parameters)</value>
  </data>
  <data name="Kameraausgleich" xml:space="preserve">
    <value>Effects how strong the pitch/rolling motions at the camera servos will be. Connect to K5=pitch servo. K6=roll servo. A setting of 0=no gyro control. Start with a setting of 1 and increase if necessary.</value>
  </data>
  <data name="Kompass" xml:space="preserve">
    <value>Effects how strong the deviation from target heading direction corrects back to heading after moving the yaw stick. Values of  -99 to +99.  Normal is 6-8.</value>
  </data>
  <data name="Leerlaufgas" xml:space="preserve">
    <value>Allows motors to have a minimum throttle to prevent them from stopping in the air and also to have them all spinning for initial launch. Values of 10 to 40 recommended.  Too high a value will cause fluttering in a fast descent.</value>
  </data>
  <data name="Limiter" xml:space="preserve">
    <value>Yaw Limiter (always positive!)
Recommended values 25 to 45.  Typically 35.</value>
  </data>
  <data name="Neutral" xml:space="preserve">
    <value>Neutral values of the accelerometer are captured when the quad is initially powered on.  It is important that the quad is not jiggled if neutral values are taken and input into the data windows.  These values will vary by accelerometer and breakout board installation, but should remain fairly constant over time. They should be re-checked especially after a very "hard landing", or a board re-mount.  You can also use the "Get values" button to automatically copy the data to the windows.  As a suggestion to get better accelerometer values, load and use the testfirmware to check the values and get a good average.  The testfirmware allows you to check the accelerometer values repeatedly by clicking on the Tools/Testsoftware/Liinear Sensor check line.</value>
  </data>
  <data name="Proportional" xml:space="preserve">
    <value>Effects gyro control strength corresponding to stick input.
The value is too low, when the quad reacts poorly or uncontrollably to stick inputs. The value is too high if the quad is oscillating. The value will be positive the Yaw if the props on the front are CW rotatiing.
 Recommended values for Pitch and roll 10 to 25, yaw 15 to 35. Be sure to use the correct sign!!</value>
    <comment>Direkt aus der Anleitung entnommen (Test)</comment>
  </data>
  <data name="Unterspannung" xml:space="preserve">
    <value>Alarm setting for the red LED and buzzer if installed for the Lipo voltage.
Recommended values for 3s Lipos from 43 to 48.</value>
  </data>
  <data name="XModus" xml:space="preserve">
    <value>Quad flight orientation.
+ = an arm forward into flight direction
X = 2 arms forward in flight driection (45° staggerd to + modes)
Note: X mode may require changes to Proportional, Integral and Differential parameters.</value>
  </data>
  <data name="GPSDifferrential" xml:space="preserve">
    <value>TBD</value>
  </data>
  <data name="GPSProportional" xml:space="preserve">
    <value>TBD</value>
  </data>
  <data name="GPSSmoothing" xml:space="preserve">
    <value>TBD</value>
  </data>
</root>