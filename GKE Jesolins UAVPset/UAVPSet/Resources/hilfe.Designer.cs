//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.3607
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace UAVP.UAVPSet.Resources {
    using System;
    
    
    /// <summary>
    ///   A strongly-typed resource class, for looking up localized strings, etc.
    /// </summary>
    // This class was auto-generated by the StronglyTypedResourceBuilder
    // class via a tool like ResGen or Visual Studio.
    // To add or remove a member, edit your .ResX file then rerun ResGen
    // with the /str option, or rebuild your VS project.
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "2.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    internal class hilfe {
        
        private static global::System.Resources.ResourceManager resourceMan;
        
        private static global::System.Globalization.CultureInfo resourceCulture;
        
        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal hilfe() {
        }
        
        /// <summary>
        ///   Returns the cached ResourceManager instance used by this class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Resources.ResourceManager ResourceManager {
            get {
                if (object.ReferenceEquals(resourceMan, null)) {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("UAVP.UAVPSet.Resources.hilfe", typeof(hilfe).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }
        
        /// <summary>
        ///   Overrides the current thread's CurrentUICulture property for all
        ///   resource lookups using this strongly typed resource class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Globalization.CultureInfo Culture {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Orientation of the accelerometer:
        /// Vertical - x right, y up, z rear
        /// Horizontal - x left, y rear, z up (chip upwards).
        /// </summary>
        internal static string AccOrientation {
            get {
                return ResourceManager.GetString("AccOrientation", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Throttle compensation for reducing the final altitude error. Experiment!.
        /// </summary>
        internal static string AltInt {
            get {
                return ResourceManager.GetString("AltInt", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Controls the maximum influence of the altitude integral value..
        /// </summary>
        internal static string AltIntLimit {
            get {
                return ResourceManager.GetString("AltIntLimit", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Reduces rate of climb or descent when changing between different altitudes helping to prevent overshoots in altitude..
        /// </summary>
        internal static string AltKd {
            get {
                return ResourceManager.GetString("AltKd", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Throttle compensation from altitude error. Experiment!.
        /// </summary>
        internal static string AltProp {
            get {
                return ResourceManager.GetString("AltProp", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Influence of the Baro sensor on the throttle (proportional use 0-8). Zero is off..
        /// </summary>
        internal static string Baro {
            get {
                return ResourceManager.GetString("Baro", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Influence of the Baro sensor on the throttle (differential use 1-16..
        /// </summary>
        internal static string BaroDif {
            get {
                return ResourceManager.GetString("BaroDif", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Scale factor to calibrate the Baro altitude to the GPS altitude..
        /// </summary>
        internal static string BaroScale {
            get {
                return ResourceManager.GetString("BaroScale", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The capacity of your flight battery in units of 100mAH..
        /// </summary>
        internal static string BatteryCapacity {
            get {
                return ResourceManager.GetString("BatteryCapacity", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Affects how strong the pitch/rolling motions at the camera servos will be. Connect to K5=pitch servo. K6=roll servo. A setting of 0=no gyro control. Start with a setting of 1 and increase if necessary..
        /// </summary>
        internal static string CameraGain {
            get {
                return ResourceManager.GetString("CameraGain", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Zero offset for camera roll servo..
        /// </summary>
        internal static string CameraRollTrim {
            get {
                return ResourceManager.GetString("CameraRollTrim", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Affects how strong the deviation from target heading direction corrects back to heading after moving the yaw stick. Normal is 24-32..
        /// </summary>
        internal static string Compass {
            get {
                return ResourceManager.GetString("Compass", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The compass offset is determined by the orientation of the compass chip relative to the aircraft&apos;s North point. For more recent revisions of the compass this will be 270 degrees and for earlier versions 90 degrees. You may also mount your compass with an orientation different to the default in which case you adjust the offset here..
        /// </summary>
        internal static string CompassOffset {
            get {
                return ResourceManager.GetString("CompassOffset", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to WARNING: Do not change these unless you are actually a 10th Dan UAVX tuner. This controls tuning of the estimated roll and pitch angles each control cycle. Very fine tuning may improve compensation for your particular pitch and roll gyros..
        /// </summary>
        internal static string CompSteps {
            get {
                return ResourceManager.GetString("CompSteps", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The time after which the quad will automatically descend after reaching the Origin when performing a RTH..
        /// </summary>
        internal static string DescentDelay {
            get {
                return ResourceManager.GetString("DescentDelay", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Uses additional throttle compensation to reduce the descent rate when changing altitude in RTH or WP navigation. This MAY help save your aircraft if you get the differential parameter wrong while tuning as insufficient differential control can result in very large overshoots - and much worse UNDERSHOOTS refered to by NASA as &quot;controlled impact with terrain&quot;. Units are in decimetres..
        /// </summary>
        internal static string DescentRate {
            get {
                return ResourceManager.GetString("DescentRate", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Corrects oscillations.  The differential value is always an opposite  set sign to proportional value.
        ///The value is too high or too low, when the quad bounces or oscillates. Possible values of -99 to 99. Typical values of -20 to +20, but values of up to -/+70 are effective.
        ///For Yaw use 0..
        /// </summary>
        internal static string Differential {
            get {
                return ResourceManager.GetString("Differential", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The type of ESCs used to control the motors..
        /// </summary>
        internal static string ESCType {
            get {
                return ResourceManager.GetString("ESCType", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Enables the use of GPS altitude values for RTH altitude hold..
        /// </summary>
        internal static string GPSAltitude {
            get {
                return ResourceManager.GetString("GPSAltitude", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Used for 6ch Rx only. Controls GPS sensitivity. Zero is no GPS influence. .
        /// </summary>
        internal static string GPSGain {
            get {
                return ResourceManager.GetString("GPSGain", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to WARNING: Do not change these unless you are actually a 10th Dan UAVX tuner. This controls the gyro compensation from gravitational offsets in the Accelerometer. Very fine tuning may improve compensation for your particular pitch and roll gyros..
        /// </summary>
        internal static string GravComp {
            get {
                return ResourceManager.GetString("GravComp", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The type of gyro used for the roll, pitch and yaw axes. The pitch and roll axis type must be identical. The Yaw axis is less demanding and may be a different type if desired.
        ///The following abbreviations/comments apply:
        /// * ADX610: ADXRS610/300 or generically 300deg/S 5V gyros.
        /// * MLX: Melexis90609 as for the above.
        /// * ADX613: ADXRS613/150 or generically 150deg/S 5V gyros.
        /// * IDG300: is a 2 axis gyro 500deg/S 3.3V gyro (not used as a Yaw gyro).
        /// * LY530: LY530ALH 300deg/S 3.3V gyro
        /// * Custom: reserved  [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string GyroType {
            get {
                return ResourceManager.GetString("GyroType", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Temperature compensation for Baro sensor (use 0)  It is always best to allow the quad to aclimate to a temperature change for 5-10 minutes before flying..
        /// </summary>
        internal static string HorizDamping {
            get {
                return ResourceManager.GetString("HorizDamping", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Horizontal velocity damping correction value.  Minimises a rapid horizontal quad response to turbulence.  Values 0 to -32, Experiment! .
        /// </summary>
        internal static string HorizontalDamping {
            get {
                return ResourceManager.GetString("HorizontalDamping", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Determines how quickly the horizontal acceleration compensation reduces after a correction.  Values 0 to 16, Experiment! .
        /// </summary>
        internal static string HorizontalDampingDecay {
            get {
                return ResourceManager.GetString("HorizontalDampingDecay", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Estimated throttle setting (%) for hover. Updated with the ACTUAL hover throttle after flight..
        /// </summary>
        internal static string HoverThrottle {
            get {
                return ResourceManager.GetString("HoverThrottle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Update rate of contRollers
        ///Minimum recommended value is +2.  Normal value is +4 to+6.  Values will vary depending on your model of Tx and Rx and ESC&apos;s.
        ///Note how motors start and the stick responsiveness and flight performance.  Usually the higher the value, the slower the stick response will feel.  Oacillations might occur with too high or too low a setting.  Adjust if necessary for the best overall performance!.
        /// </summary>
        internal static string Impuls {
            get {
                return ResourceManager.GetString("Impuls", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to  *Always the same sign as proportional!
        ///Affects the total gyro/acc value over time.  Important for the Heading Lock of the yaw channel.  The higher the value, the more accelerometer self-leveling emphasis there will be.  A value too high causes the quad to osciillate, a value that is too small causes a poor return to  level.   Recommended Pitch and Roll &quot;I&quot; values of 0 to 15.  For CCW front prop rotation the yaw &quot;I and P&quot; values are negative!  For CW front prop rotation the yaw &quot;I and P&quot; values are  positi [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string Integral {
            get {
                return ResourceManager.GetString("Integral", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Integral Limiter 
        ///Always positive! 
        ///Low value causes slow return to level.  Too high a value can cause flips.  Recommended values for pitch and roll of +4 to +15. Recommended values for yaw of +1 to +2.  Upper value is automatically limitied by the your integral setting..
        /// </summary>
        internal static string IntegralLimiter {
            get {
                return ResourceManager.GetString("IntegralLimiter", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Yaw Limiter (always positive!)
        ///Recommended values 25 to 45.  Typically 35..
        /// </summary>
        internal static string Limiter {
            get {
                return ResourceManager.GetString("Limiter", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Allows motors to have a minimum throttle to prevent them from stopping in the air and also to have them all spinning for initial launch. Values of 5% to 20% recommended.  Too high a value will cause fluttering in a fast descent..
        /// </summary>
        internal static string LowMotorRun {
            get {
                return ResourceManager.GetString("LowMotorRun", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Used to minimise the final error in desired altitude hold. Experiment!.
        /// </summary>
        internal static string NavAltIntegral {
            get {
                return ResourceManager.GetString("NavAltIntegral", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Determines how much throttle to use to climb or descend to desired altitude. Experiment!.
        /// </summary>
        internal static string NavAltProportional {
            get {
                return ResourceManager.GetString("NavAltProportional", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Compensates for closing velocity particularly for RTH. Experiment!..
        /// </summary>
        internal static string NavDiff {
            get {
                return ResourceManager.GetString("NavDiff", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Used to minimise the final error in desired altitude hold compensating for wind. Experiment!.
        /// </summary>
        internal static string NavInt {
            get {
                return ResourceManager.GetString("NavInt", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Assists in achieving and maintaining the desired GPS position in wind. TBD experiment!.
        /// </summary>
        internal static string NavIntLimit {
            get {
                return ResourceManager.GetString("NavIntLimit", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The magnetic variation of True from Magnetic North in positive degrees East.    Here is a site to find your Magnetic Variation: http://www.magnetic-declination.com/#.
        /// </summary>
        internal static string NavMagVar {
            get {
                return ResourceManager.GetString("NavMagVar", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The quadrocopter relies only on its gyroscopes and accelerometer if it is less than this radius from the desired GPS position. The radius corresponds to the likely error radius of the GPS position. 
        ///While inside this radius no GPS based corrections are applied. Recommended value is 2..
        /// </summary>
        internal static string NavNeutralRadius {
            get {
                return ResourceManager.GetString("NavNeutralRadius", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Maximum control action is applied when the quadrocopter is greater than this distance
        ///from the desired GPS position. Below this distance proportionately less control is exerted. Recommended value is 20..
        /// </summary>
        internal static string NavRadius {
            get {
                return ResourceManager.GetString("NavRadius", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The altitude desired when executing a return to home(RTH)..
        /// </summary>
        internal static string NavRTHAltitude {
            get {
                return ResourceManager.GetString("NavRTHAltitude", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Neutral values of the accelerometer are captured when the quad is initially powered on.  It is important that the quad is not jiggled if neutral values are taken and input into the data windows.  These values will vary by accelerometer and breakout board installation, but should remain fairly constant over time. They should be re-checked especially after a very &quot;hard landing&quot;, or a board re-mount.  You can also use the &quot;Get values&quot; button to automatically copy the data to the windows.  As a suggestion to ge [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string Neutral {
            get {
                return ResourceManager.GetString("Neutral", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Currently the traditional PPM/PCM format is supported along with DSM2. DSM2 must use the ACTRO model with no mixing..
        /// </summary>
        internal static string PPMDSM2 {
            get {
                return ResourceManager.GetString("PPMDSM2", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Affects gyro control strength corresponding to stick input.
        ///The value is too low, when the quad reacts poorly or uncontrollably to stick inputs. The value is too high if the quad is oscillating. The value will be positive for the yaw if the props on the front are CW rotatiing.  
        /// Recommended values for pitch and roll 10 to 25.  Recommended values for yaw 15 to 35. For CCW front prop rotation the yaw &quot;I and P&quot; values are negative!  For CW front prop rotation the yaw &quot;I and P&quot; values are  positive!  Be sure [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string Proportional {
            get {
                return ResourceManager.GetString("Proportional", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Ultrasonic rangefinder minimum resolution. Either one centimetre or one inch..
        /// </summary>
        internal static string RangefinderResolution {
            get {
                return ResourceManager.GetString("RangefinderResolution", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Enables automatic descend after a short delay upon reaching the Origin when using RTH..
        /// </summary>
        internal static string RTHDescend {
            get {
                return ResourceManager.GetString("RTHDescend", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The Rx input to the quadrocopter may be odd numbered channels or a serial PPM signal by connecting directly into the Rx circuit..
        /// </summary>
        internal static string RxFormat {
            get {
                return ResourceManager.GetString("RxFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Controls the format of telemetry information:
        /// * None
        /// * GPS - directly echoes the GPS packets character by character
        /// * UAVXNav - compressed binary packets for the UAVX groundstation 
        /// * ArduStation - simple text packets for the hand held DIYDrones groundstation
        ///.
        /// </summary>
        internal static string TelemetryType {
            get {
                return ResourceManager.GetString("TelemetryType", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Tx stick configuration:
        /// Mode 1 - Left Stick Elevator and Rudder, Right Stick Throttle and Ailerons
        /// Mode 2 - Left Stick Throttle and Rudder, Right Stick Elevator and Ailerons.
        /// </summary>
        internal static string TxMode {
            get {
                return ResourceManager.GetString("TxMode", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Connect the following channels to the Quadrocopter: 
        /// * Futaba Th 3 Throttle - Aileron, Elevator, Gear, Aux2
        /// * Futaba Th 2 Throttle - Aileron, Rudder, Gear, Aux2
        /// * Futaba DM8/AR7000 - Throttle, Aileron, Rudder, Aux2
        /// * JR XP8103/PPM - Throttle, Elevator, Gear, Aux2
        /// * JR 9XII DM9/AR7000 - Aileron, Rudder, Gear, Aux2
        /// * JR DXS12/AR7000 - Aileron, Rudder, Gear, Aux2
        /// * Spektrum DX7/AR7000 - Aileron, Rudder, Gear, Aux2  
        /// * Spektrum DX7/AR6200 - Throttle, Elevator, Gear (Mix Rudder to Aux1)
        /// * Futab [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string TxRxType {
            get {
                return ResourceManager.GetString("TxRxType", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Alarm setting for the red LED and buzzer if installed for the LiPo voltage.
        ///Recommended values for 3s Lipos from 43 to 48..
        /// </summary>
        internal static string Unterspannung {
            get {
                return ResourceManager.GetString("Unterspannung", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Vertical velocity damping correction value.  Minimises a rapid climb/sink quad response to turbulence.  Values 0 to -32, Experiment! .
        /// </summary>
        internal static string VerticalDamping {
            get {
                return ResourceManager.GetString("VerticalDamping", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Determines how quickly the vertical acceleration compensation reduces after a correction.  Values 0 to 16, Experiment! .
        /// </summary>
        internal static string VerticalDampingDecay {
            get {
                return ResourceManager.GetString("VerticalDampingDecay", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Quadrocopter flight orientations (control board pointing TOWARDS Motor K1):
        ///  + = one arm forward K1 front, K2 left, K3 right, K4 rear.
        ///  X = two arms forward K1 left front, K2 left rear, K3 right front, K4 right rear.
        ///Tricopter flight orientations (control board pointing AWAY from Motor K1):
        ///  Y = one arm trailing K1 rear, K2 left front, K3 right front, K4 yaw servo.
        ///  ^ = one arm forward K1 front, K2 right rear, K3, left rear, K4 yaw servo.
        ///Notes: Kn refers to motor connection. 
        ///For the Tricopter I [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string XModus {
            get {
                return ResourceManager.GetString("XModus", resourceCulture);
            }
        }
    }
}
